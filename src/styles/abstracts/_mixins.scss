@use './variables' as *;

@mixin size($size) {
    @if $size == full {
        $size: 100%;
    }
    height: $size;
    width: $size;
}

@mixin positioned(
    $position: absolute,
    $top: null,
    $right: null,
    $bottom: null,
    $left: null,
    $z: 0
) {
    position: $position;
    z-index: $z;

    @each $dir, $val in (top: $top, right: $right, bottom: $bottom, left: $left)
    {
        @if $val != null {
            #{$dir}: $val;
        }
    }

    @if $top == null and $right == null and $bottom == null and $left == null {
        top: 0;
        left: 0;
    }
}

@mixin respond-to($size) {
    $breakpoint: map-get($breakpoints, $size);

    @if $breakpoint != null {
        @media screen and (min-width: $breakpoint) {
            @content;
        }
    }
}

@mixin respond-to-range($from, $to) {
    $min: map-get($breakpoints, $from);
    $max: map-get($breakpoints, $to);

    @if $min != null and $max != null {
        @media screen and (min-width: $min) and (max-width: $max - 1) {
            @content;
        }
    }
}

@mixin section-spacing(
    $sm: (
        vertical: 0,
        horizontal: 1rem,
    ),
    $md: (
        vertical: 0,
        horizontal: 4rem,
    ),
    $lg: (
        vertical: 0,
        horizontal: 6rem,
    )
) {
    @include respond-to(sm) {
        padding: map-get($sm, vertical) map-get($sm, horizontal);
    }
    @include respond-to(md) {
        padding: map-get($md, vertical) map-get($md, horizontal);
    }
    @include respond-to(lg) {
        padding: map-get($lg, vertical) map-get($lg, horizontal);
    }
}

@mixin linear-gradient($direction, $colors...) {
    background-image: linear-gradient($direction, $colors...);
}
